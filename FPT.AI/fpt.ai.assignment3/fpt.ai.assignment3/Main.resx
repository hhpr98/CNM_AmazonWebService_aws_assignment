<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        igAAAABJRU5ErkJggg==
</value>
  </data>
</root>